<?php

namespace WeSoonNet\LaravelPlus\Services\Com;

use Illuminate\Support\Facades\Cache;

class ImageCaptchaService
{
    /**
     * create image
     *
     * @param string $key
     * @param int    $minutes
     * @param int    $width
     * @param int    $height
     * @param int    $font_size
     * @param int    $chars_length
     *
     * @return $this
     */
    public static function create(string $key = '', int $minutes = 60, int $width = 120, int $height = 40, int $font_size = 20, int $chars_length = 4)
    {
        //PHP CAPTCHA image
        //Generated by https://www.html-code-generator.com/php/captcha-image-code-generator.php

        $captcha_characters = '123456789ABCDEFGHIJKLMNPQRSTUVWXYZ';

        $image      = imagecreatetruecolor($width, $height);
        $bg_color   = imagecolorallocate($image, rand(0, 255), rand(0, 255), rand(0, 255));
        $font_color = imagecolorallocate($image, 255, 255, 255);
        imagefilledrectangle($image, 0, 0, $width, $height, $bg_color);

        //background random-line
        $vert_line = round($width / 5);
        $color     = imagecolorallocate($image, 255, 255, 255);

        for ($i = 0; $i < $vert_line; $i++)
        {
            $color = imagecolorallocate($image, rand(0, 255), rand(0, 255), rand(0, 255));
            imageline($image, rand(0, $width), rand(0, $height), rand(0, $height), rand(0, $width), $color);
        }

        $xw       = ($width / $chars_length);
        $x        = 0;
        $font_gap = $xw / 2 - $font_size / 2;
        $digit    = '';

        for ($i = 0; $i < $chars_length; $i++)
        {
            $letter = $captcha_characters[rand(0, strlen($captcha_characters) - 1)];
            $digit  .= $letter;
            if ($i == 0)
            {
                $x = 0;
            }
            else
            {
                $x = $xw * $i;
            }
            $font = __DIR__ . '/verdana.ttf';
            imagettftext($image, $font_size, rand(-20, 20), $x + $font_gap, rand(26, $height - 5), $font_color, $font, $letter);
        }

        // record token in session variable
        if ($key)
        {
            Cache::put('captcha_' . strtolower($key), md5(strtolower($digit)), $minutes);
        }

        // render image
        header('Content-Type: image/png');
        imagepng($image);
        imagedestroy($image);
        exit;
    }

    public static function verify(string $key, string $code)
    {
        return Cache::has('captcha_' . strtolower($key)) && Cache::get('captcha_' . strtolower($key)) === md5(strtolower($code));
    }
}
